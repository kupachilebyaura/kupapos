generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model Business {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  taxId     String?
  currency  String   @default("CLP")
  taxName   String   @default("IVA")
  taxRate   Decimal  @db.Decimal(5, 2) @default(16.00)
  includeTaxInPrice Boolean @default(false)
  notifyLowStock    Boolean @default(true)
  notifyDailyReports Boolean @default(true)
  notifyNewCustomers Boolean @default(false)
  notifySystemUpdates Boolean @default(true)
  paymentMethods String[] @default([])
  blockZeroStock Boolean @default(false)
  users     User[]
  products  Product[]
  sales     Sale[]
  customers Customer[]
  cashSessions CashSession[]
  createdAt DateTime @default(now())
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  passwordHash String
  role       Role     @default(USER)
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  openedSessions CashSession[] @relation("CashSessionOpenedBy")
  closedSessions CashSession[] @relation("CashSessionClosedBy")
  voidedSales  Sale[] @relation("SaleVoidedBy")
}

model Product {
  id         String   @id @default(cuid())
  name       String
  price      Decimal  @db.Decimal(10, 2)
  stock      Int
  category   String
  barcode    String?
  cost       Decimal? @db.Decimal(10, 2)
  minStock   Int      @default(0)
  details    String?
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  saleItems  SaleItem[]
  createdAt  DateTime  @default(now())
}

model Sale {
  id         String     @id @default(cuid())
  total      Decimal    @db.Decimal(10, 2)
  items      SaleItem[]
  customer   Customer?  @relation(fields: [customerId], references: [id])
  customerId String?
  business   Business   @relation(fields: [businessId], references: [id])
  businessId String
  paymentMethod String?
  discount   Decimal    @db.Decimal(10, 2) @default(0)
  tip        Decimal?   @db.Decimal(10, 2)
  status     SaleStatus @default(COMPLETED)
  voidReason String?
  voidedAt   DateTime?
  voidedBy   User?      @relation("SaleVoidedBy", fields: [voidedById], references: [id])
  voidedById String?
  cashSession CashSession? @relation(fields: [cashSessionId], references: [id])
  cashSessionId String?
  createdAt  DateTime   @default(now())
}

model SaleItem {
  id        String  @id @default(cuid())
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  discount  Decimal @db.Decimal(10, 2) @default(0)
}

model Customer {
  id        String  @id @default(cuid())
  name      String
  rut       String? @unique
  email     String? @unique
  phone     String?
  address   String?
  region    String?
  commune   String?
  birthDate DateTime?
  notes     String?
  business  Business @relation(fields: [businessId], references: [id])
  businessId String
  sales     Sale[]
  createdAt DateTime @default(now())
}

model CashSession {
  id            String             @id @default(cuid())
  business      Business           @relation(fields: [businessId], references: [id])
  businessId    String
  openedBy      User               @relation("CashSessionOpenedBy", fields: [openedById], references: [id])
  openedById    String
  closedBy      User?              @relation("CashSessionClosedBy", fields: [closedById], references: [id])
  closedById    String?
  openingAmount Decimal            @db.Decimal(12, 2)
  closingAmount Decimal?           @db.Decimal(12, 2)
  expectedAmount Decimal?          @db.Decimal(12, 2)
  difference     Decimal?          @db.Decimal(12, 2)
  openingNote    String?
  closingNote    String?
  status        CashSessionStatus  @default(OPEN)
  openedAt      DateTime           @default(now())
  closedAt      DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  sales         Sale[]
}

enum CashSessionStatus {
  OPEN
  CLOSED
}

enum SaleStatus {
  COMPLETED
  VOIDED
}
